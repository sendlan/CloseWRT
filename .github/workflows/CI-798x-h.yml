name: CI-798x-h

# CI计划
on:
  # 手动编译
  workflow_dispatch:
    inputs:
      TARGET:
        default: 'MTK-7981'
        required: true
        type: choice
        options: [MTK-7981, MTK-7986]
      FEEDS:
        description: 'luci packages软件源'
        default: 'lgs2007m'
        required: true
        type: choice
        options: [immortalwrt, NekokeCore, lgs2007m]
      USB_EMMC:
        description: '普通/USB/EMMC机型'
        default: 'xr30-emmc'
        required: true
        type: choice
        options: [off_false, xr30, xr30-emmc, sl3000_emmc]
      WIFI_DRIVER:
        description: '选择WiFi驱动程序'
        required: true
        default: 'v7.6.7.2-fw-20240823(recommend)'
        type: choice
        options: [v7.6.7.2-fw-20240823(recommend), v7.6.6.1-fw-20230306(recommend), v7.6.7.2-fw-default, v7.6.7.2-fw-20230306, v7.6.7.2-fw-20230330, v7.6.7.2-fw-20230411, v7.6.7.2-fw-20230717, v7.6.7.2-fw-20231024, v7.6.6.1-fw-default, v7.6.6.1-fw-20230330, v7.6.6.1-fw-20230411, v7.6.6.1-fw-20230717, v7.6.6.1-fw-20231024]
      EEPROM:
        description: 'eeprom+固定MAC'  #off不使用高功率eeprom
        required: true
        default: 'nx30pro_eeprom' 
        type: choice
        options: [360t7_eeprom, nx30pro_eeprom, off_false]
      WIFI:
        description: '修改默认WIFI名称'
        required: true
        default: 'Mediatek'
      ADJUST:
        description: '内存低占用模式，默认关闭'
        default: 'false'
        required: true
        type: boolean
      DOCKER:
        description: '添加 docker容器'
        required: true
        default: false
        type: boolean
      PACKAGE:
        description: '添加插件'
        required: false
        type: string
      

# CI权限
permissions: write-all

# CI任务
jobs:
  wrt_core:
    name: ${{inputs.TARGET}}
    runs-on: ubuntu-22.04
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      WRT_TARGET:  ${{inputs.TARGET}}
      WRT_THEME: argon
      WRT_NAME: Immortalwrt
      WRT_WIFI: ${{inputs.WIFI}}
      WRT_IP: 192.168.2.1
      WRT_PW: 无
      WRT_REPO: https://github.com/hanwckf/immortalwrt-mt798x.git
      WRT_BRANCH: openwrt-21.02
      WRT_PACKAGE: ${{inputs.PACKAGE}}
      WRT_ADJUST: ${{inputs.ADJUST}}
      WRT_TEST: false
      USE_IPK: true  #调整插件布局
      USE_CPU_MHZ: ${{inputs.MHZ}}
      USE_MTWIFI_CFG: true #使用mtwifi无线界面
      USE_DOCKER: ${{inputs.DOCKER}}
      USE_EEPROM: ${{inputs.EEPROM}}
      USE_WIFI_DRIVER: ${{inputs.WIFI_DRIVER}}
      WRT_USB_EMMC: ${{inputs.USB_EMMC}}
      WRT_FEEDS: ${{inputs.FEEDS}}
      
    steps:
      - name: 检出项目代码
        uses: actions/checkout@main

      - name: 释放磁盘空间
        uses: endersonmenezes/free-disk-space@main
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* libgl1* lld* llvm* \
            microsoft* mongodb* mono* mysql* nodejs* openjdk* php* postgresql* powershell* snap* temurin* yarn* zulu*"
          remove_packages_one_command: true
          remove_folders: "/etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* /usr/lib/llvm* /usr/lib/mono* \
            /usr/local/lib/android* /usr/local/lib/node_modules* /usr/local/share/chromium* /usr/local/share/powershell* \
            /usr/local/share/vcpkg/ports/azure* /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* \
            /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* /usr/local/share/vcpkg/ports/snap* \
            /usr/share/azure* /usr/share/dotnet* /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift \
            /var/lib/mysql* /var/log/azure*"
          testing: false

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix libfuse-dev
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: 初始化值
        run: |
          export WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export WRT_CI=$(basename $GITHUB_WORKSPACE)
          export WRT_VER=$(echo $WRT_REPO | cut -d '/' -f 4)-$WRT_BRANCH
          export WRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/Config/all/7981_usb.config)

          echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV
          echo "WRT_CI=$WRT_CI" >> $GITHUB_ENV
          echo "WRT_VER=$WRT_VER" >> $GITHUB_ENV
          echo "WRT_TYPE=$WRT_TYPE" >> $GITHUB_ENV

      - name: 克隆代码
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./wrt/

          cd ./wrt/ && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV

      - name: 检查脚本
        run: |
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: 检查补丁
        run: |
          if [ -f "$GITHUB_WORKSPACE/Patches/Patches.sh" ]; then
            $GITHUB_WORKSPACE/Patches/Patches.sh
          else
            echo "没有需要安装的补丁！"
          fi

      - name: 检查缓存
        if: env.WRT_TEST != 'true'
        id: check-cache
        uses: actions/cache@main
        with:
          key: ${{env.WRT_TARGET}}-${{env.WRT_VER}}-${{env.WRT_HASH}}
          path: |
            ./wrt/.ccache
            ./wrt/staging_dir/host*
            ./wrt/staging_dir/tool*

      - name: 更新缓存
        if: env.WRT_TEST != 'true'
        run: |
          if ${{steps.check-cache.outputs.cache-hit == 'true'}}; then
            sed -i 's/ $(tool.*\/stamp-compile)//g' ./wrt/Makefile
            sed -i 's/ $(tool.*\/stamp-install)//g' ./wrt/Makefile

            echo "工具链跳过完成！"
          else
            gh extension install actions/gh-actions-cache

            CACHE_LIST=$(gh actions-cache list --key "$WRT_TARGET-$WRT_VER" | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
               gh actions-cache delete $CACHE_KEY --confirm
            done

            echo "缓存清理完成！"
          fi

      - name: 更新Feeds
        run: |
          cd ./wrt/
          if [[ $WRT_FEEDS == "NekokeCore" ]] ; then
              # 修改 feeds.conf.default 文件内容
              # 将默认的 packages 和 luci 仓库地址替换为 NekokeCore 的仓库地址
              sed -i 's|src-git-full packages https://github.com/immortalwrt/packages.git;openwrt-21.02|src-git-full packages https://github.com/NekokeCore/immortalwrt-mt798x-packages.git;openwrt-21.02|' feeds.conf.default
              sed -i 's|src-git-full luci https://github.com/immortalwrt/luci.git;openwrt-21.02|src-git-full luci https://github.com/NekokeCore/immortalwrt-mt798x-luci.git;openwrt-21.02|' feeds.conf.default
              echo 'src-git nas https://github.com/linkease/nas-packages.git;master' >> feeds.conf.default
              echo 'src-git nas_luci https://github.com/linkease/nas-packages-luci.git;main' >> feeds.conf.default
              echo "修改feeds.conf.default源为 ${WRT_FEEDS}"
          elif [[ $WRT_FEEDS == "lgs2007m" ]] ; then
              sed -i 's|src-git-full packages https://github.com/immortalwrt/packages.git;openwrt-21.02|src-git-full packages https://github.com/lgs2007m/immortalwrt-mt798x-packages.git;openwrt-21.02|' feeds.conf.default
              sed -i 's|src-git-full luci https://github.com/immortalwrt/luci.git;openwrt-21.02|src-git-full luci https://github.com/lgs2007m/immortalwrt-mt798x-luci.git;openwrt-21.02|' feeds.conf.default
              echo 'src-git nas https://github.com/linkease/nas-packages.git;master' >> feeds.conf.default
              echo 'src-git nas_luci https://github.com/linkease/nas-packages-luci.git;main' >> feeds.conf.default
              echo "修改feeds.conf.default源为 ${WRT_FEEDS}"
          fi
          # 应用补丁
          cp $GITHUB_WORKSPACE/Config/all/h-add-sl3000.diff h-add-sl3000.diff
          git apply h-add-sl3000.diff
          # 添加补丁
          cp $GITHUB_WORKSPACE/Config/all/spinor/1020-v2-spi-nor-BY25Q256FS.patch ./target/linux/mediatek/patches-5.4/1020-v2-spi-nor-BY25Q256FS.patch
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a          
          
      - name: 自定义包
        run: |
          cd ./wrt/package/
          ls
          $GITHUB_WORKSPACE/Scripts/Packages.sh
          $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: 自定义设置
        run: |
          cd ./wrt/
          rm -rf ./tmp* ./.config*
          if [[ $WRT_USB_EMMC == "xr30" ]] ; then
              rm -rf ./tmp* ./.config*
              cat $GITHUB_WORKSPACE/Config/xr30_rax3000m/xr30_rax3000m.config >> .config                       
              echo "使用xr30配置文件"
          elif [[ $WRT_USB_EMMC == "xr30-emmc" ]] ; then
              rm -rf ./tmp* ./.config*
              cat $GITHUB_WORKSPACE/Config/xr30_rax3000m_emmc/xr30_rax3000m_emmc.config >> .config                       
              echo "使用xr30_emmc配置文件"
          elif [[ $WRT_USB_EMMC == "sl3000_emmc" ]] ; then
              rm -rf ./tmp* ./.config*
              cat $GITHUB_WORKSPACE/Config/sl_3000/sl_3000_emmc.txt >> .config                       
              echo "使用sl_3000_emmc配置文件"
          elif [[ $WRT_USB_EMMC == "off_false" ]] ; then
              cat $GITHUB_WORKSPACE/Config/360t7/360t7.txt >> .config
              echo "使用360t7配置文件"
          fi

          echo "CONFIG_MTK_MT_WIFI_DRIVER_VERSION_7672=y" >> ./.config
          echo "CONFIG_MTK_MT_WIFI_MT7986_20240823=y=y" >> ./.config
          $GITHUB_WORKSPACE/Scripts/Settings.sh
          
          # xr30 加入luci-i18n-samba4-zh-cn
          sed -i '/define Device\/cmcc_xr30-emmc/,/endef/ s/luci-app-samba4/luci-app-samba4 luci-i18n-samba4-zh-cn/' target/linux/mediatek/image/mt7981.mk
          # rax3000m
          sed -i '/define Device\/cmcc_rax3000m/,/endef/ s/luci-app-samba4/luci-app-samba4 luci-i18n-samba4-zh-cn/' target/linux/mediatek/image/mt7981.mk

          #取消mtwifi配置
          if [[ $USE_MTWIFI_CFG == "false" ]] ; then
              sed -i 's/CONFIG_PACKAGE_luci-app-mtwifi-cfg=y/CONFIG_PACKAGE_luci-app-mtk=y/g' .config
              sed -i 's/CONFIG_PACKAGE_luci-i18n-mtwifi-cfg-zh-cn=y/CONFIG_PACKAGE_luci-i18n-mtk-zh-cn=y/g' .config
              sed -i 's/CONFIG_PACKAGE_mtwifi-cfg=y/CONFIG_PACKAGE_wifi-profile=y/g' .config
              sed -i 's/CONFIG_PACKAGE_lua-cjson=y/CONFIG_WIFI_NORMAL_SETTING=y/g' .config
              echo "取消mtwifi配置wifi，mtwifi=false!"
          fi
          #cpu频率不显示
          sed -i "s/cpu_freq=\"\$(mhz | awk \-F 'cpu_MHz=' '{printf(\"\%.fMHz\",\$2)}')\"/cpu_freq=\"\"/g" package/emortal/autocore/files/generic/cpuinfo

          #修改插件位置
          if [[ $USE_IPK == "true" ]] ; then
              #部分插件调整到status 状态
              sed -i 's/services/status/g' ./package/feeds/luci/luci-app-nlbwmon/root/usr/share/luci/menu.d/luci-app-nlbwmon.json  || true
              #sed -i 's/network/status/g' ./package/mtk/applications/luci-app-wrtbwmon/root/usr/share/luci/menu.d/luci-app-wrtbwmon.json  || true
              #部分插件调整到nas 网络储存
              sed -i 's/services/nas/g' ./package/luci-app-aliyundrive-webdav/luasrc/controller/*.lua  || true
              sed -i 's/services/nas/g' ./package/luci-app-aliyundrive-webdav/luasrc/view/aliyundrive-webdav/*.htm  || true
              sed -i 's/services/nas/g' ./package/feeds/luci/luci-app-wol/root/usr/share/luci/menu.d/luci-app-wol.json  || true
              sed -i 's/services/nas/g' ./package/feeds/luci/luci-app-ksmbd/root/usr/share/luci/menu.d/luci-app-ksmbd.json  || true
              #部分插件调整到vpn
              sed -i 's/services/vpn/g' ./package/feeds/luci/luci-app-uugamebooster/luasrc/controller/*.lua  || true
              sed -i 's/services/vpn/g' ./package/feeds/luci/luci-app-uugamebooster/luasrc/view/uugamebooster/*.htm  || true
              #部分插件调整到network 网络
              sed -i 's/services/network/g' ./package/mtk/applications/luci-app-eqos-mtk/root/usr/share/luci/menu.d/luci-app-eqos.json  || true
              echo "修改插件位置!"
          fi        
          
      - name: 设置WiFi驱动版本
        run: |
            cd ./wrt/            
            wifi_driver=$(echo "${{ github.event.inputs.WIFI_DRIVER }}" | sed -E 's/^(v[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
            firmware=$(echo "${{ github.event.inputs.WIFI_DRIVER }}" | sed -E 's/.*fw-([0-9]{8}|default).*/\1/g')
            if [ "$wifi_driver" == "v7.6.6.1" ]; then
                  sed -i 's/CONFIG_MTK_MT_WIFI_DRIVER_VERSION_7672=y/CONFIG_MTK_MT_WIFI_DRIVER_VERSION_7661=y/g' .config
            fi
            if [ "$firmware" == "default" ]; then
                  sed -i 's/CONFIG_MTK_MT_WIFI_MT7981_20240823=y/CONFIG_MTK_MT_WIFI_MT7981_DEFAULT_FIRMWARE=y/g' .config
            else
                  sed -i 's/CONFIG_MTK_MT_WIFI_MT7981_20240823=y/CONFIG_MTK_MT_WIFI_MT7981_${firmware}=y/g' .config
            fi
            echo "Use WiFi Driver: $wifi_driver-fw-$firmware"

      - name: 使用nx30pro的高功率eeprom并固定WiFi MAC地址
        if: env.USE_EEPROM != 'off_false'
        run: |
            cd ./wrt/
            wifi_driver=$(echo "${{ github.event.inputs.WIFI_DRIVER }}" | sed -E 's/^(v[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
            if [ "$wifi_driver" == "v7.6.6.1" ]; then
                  cp $GITHUB_WORKSPACE/Config/all/"$USE_EEPROM".bin package/mtk/drivers/mt_wifi/files-7661/bin/mt7981/rebb/MT7981_iPAiLNA_EEPROM.bin
            else
                  cp $GITHUB_WORKSPACE/Config/all/mt79xx_20231229-4012a0_eeprom.tar.xz dl/mt79xx_20231229-4012a0.tar.xz
            fi

            
      - name: 设置 dockerman 容器
        if: env.USE_DOCKER == 'true'
        run: |
            cd ./wrt/
            echo -e "\nCONFIG_PACKAGE_luci-app-dockerman=y" >> .config

      - name: 下载文件
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/
          make defconfig -j$(nproc)
          make download -j$(nproc)

      - name: 编译固件
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/

          make -j$(nproc) || make -j1 V=s

      - name: 机器信息
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | grep -E "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: 打包固件
        run: |
          cd ./wrt/ && mkdir ./upload/

          cp -f ./.config ./upload/Config_"$WRT_TARGET"_"$WRT_VER"_"$WRT_DATE".txt

          if [[ $WRT_TEST != 'true' ]]; then
            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|manifest\|sha256sums\|packages\)$" -exec rm -rf {} +

            for TYPE in $WRT_TYPE ; do
              for FILE in $(find ./bin/targets/ -type f -iname "*$TYPE*.*") ; do
                EXT=$(basename $FILE | cut -d '.' -f 2-)
                NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($TYPE\).*")
                NEW_FILE="$WRT_VER"_"$NAME"_"$WRT_DATE"."$EXT"
                mv -f $FILE ./upload/$NEW_FILE
              done
            done

            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;
          fi

      - name: 发布固件
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{env.WRT_TARGET}}_${{env.WRT_VER}}_${{env.WRT_DATE}}
          files: ./wrt/upload/*.*
          body: |
            源码：${{env.WRT_REPO}}
            分支：${{env.WRT_BRANCH}}
            平台：${{env.WRT_TARGET}}
            设备：${{env.WRT_TYPE}}
            地址：${{env.WRT_IP}}
            密码：${{env.WRT_PW}}
            添加插件: ${{env.WRT_PACKAGE}}
            使用WiFi驱动: ${{env.USE_WIFI_DRIVER}}
            EEPROM：${{env.USE_EEPROM}}
            DOCKER: ${{env.USE_DOCKER}}
